from typing import Optional, List
from pydantic import BaseModel, Field
import pandas as pd
import matplotlib.pyplot as plt

class VisualizeFXRatesInput(BaseModel):
    currency_codes: List[str] = Field(description="List of currency codes.")
    start_period: Optional[str] = Field(default=None, description="Start period (e.g., 'January'). If 'YTD' is specified, it will be set to 'January'.")
    end_period: Optional[str] = Field(default=None, description="End period (e.g., 'August'). If 'YTD' is specified, it will be set to 'August'.")
    comparison_type: Optional[str] = Field(default='difference', description="'difference' or 'percentage difference'.")
    chart_type: Optional[str] = Field(default='line', description="'line' or 'bar'.")

def visualize_fx_rates(input: VisualizeFXRatesInput) -> str:
    # Extract parameters
    currency_codes = input.currency_codes
    start_period = input.start_period
    end_period = input.end_period
    comparison_type = input.comparison_type.lower()
    chart_type = input.chart_type.lower()

    # Validate inputs
    if not currency_codes:
        return "Missing required parameter: currency_codes."
    
    # Handle 'YTD' or missing periods
    if start_period is None or end_period is None or 'ytd' in (start_period.lower(), end_period.lower()):
        # YTD: Year-To-Date from January to August
        start_period = 'January'
        end_period = 'August'

    # Convert periods to datetime
    try:
        start_date = pd.to_datetime(f"2023 {start_period}", format='%Y %B')
        end_date = pd.to_datetime(f"2023 {end_period}", format='%Y %B')
    except Exception as e:
        return f"Invalid date format: {e}"

    # Ensure start_date is before end_date
    if start_date > end_date:
        start_date, end_date = end_date, start_date

    # Filter data for the given currency codes
    df_filtered = df_fx_rates_melted[
        df_fx_rates_melted['Currency'].isin(currency_codes)
    ]

    if df_filtered.empty:
        return "No data available for the given currency codes."

    # Filter dates
    df_filtered = df_filtered[
        (df_filtered['Date'] >= start_date) & (df_filtered['Date'] <= end_date)
    ]

    if df_filtered.empty:
        return "No data available for the given date range."

    # Pivot data for easier calculation
    df_pivot = df_filtered.pivot_table(
        index='Date', columns='Currency', values='FX Rate'
    )

    # Ensure data types are numeric
    df_pivot = df_pivot.apply(pd.to_numeric, errors='coerce')

    # Drop columns with all NaN values
    df_pivot.dropna(axis=1, how='all', inplace=True)

    if df_pivot.empty:
        return "No valid FX Rate data available after processing."

    # Perform comparison
    if comparison_type == 'difference':
        df_diff = df_pivot.iloc[-1] - df_pivot.iloc[0]
        title = f"Difference in FX Rates between {start_period} and {end_period}"
    elif comparison_type == 'percentage difference':
        df_diff = ((df_pivot.iloc[-1] - df_pivot.iloc[0]) / df_pivot.iloc[0]) * 100
        title = f"Percentage Difference in FX Rates between {start_period} and {end_period}"
    else:
        return "Invalid comparison type. Please specify 'difference' or 'percentage difference'."

    # Drop NaN values from df_diff
    df_diff.dropna(inplace=True)

    if df_diff.empty:
        return "No data available after calculating differences."

    # Plotting
    plt.figure(figsize=(10, 6))
    if chart_type == 'bar':
        df_diff.plot(kind='bar', legend=False)
    else:
        df_diff.plot(legend=False)

    plt.title(title)
    plt.ylabel('Percentage Difference (%)' if 'percentage' in comparison_type else 'FX Rate Difference')
    plt.xlabel('Currency Code')

    # Annotate the currency with the highest difference
    try:
        max_currency = df_diff.idxmax()
        max_value = df_diff.max()
        plt.annotate(f'Highest: {max_currency}', xy=(df_diff.index.get_loc(max_currency), max_value), xytext=(0, 10),
                     textcoords='offset points', ha='center', va='bottom', fontsize=12, color='red')
    except Exception as e:
        print(f"Annotation error: {e}")

    # Display the plot
    plt.show()

    return "Here is the visualization as per your request."

system_prompt = """
You are a helpful assistant for the corporate treasury department.

When a user asks a question about exchange rates or FX rates (they are the same), collect the necessary parameters and call the 'visualize_fx_rates' function.

**Parameters to extract:**

- currency_codes: A list of currency codes (e.g., ['USD', 'EUR']).
- start_period: The start month (e.g., 'January'). If 'YTD' is mentioned, set start_period to 'January'.
- end_period: The end month (e.g., 'August'). If 'YTD' is mentioned, set end_period to 'August'.
- comparison_type: Either 'difference' or 'percentage difference'. Default is 'difference'.
- chart_type: Either 'line' or 'bar'. Default is 'line'.

**Important Notes:**

- Always use currency codes when specifying currencies.
- 'Exchange rate' and 'FX rate' are the same.
- If 'YTD' is mentioned, set the start and end periods accordingly.

**Example:**

User asks: "Show me a bar graph with the percentage difference in FX Rates YTD for the USD and EUR."

You should extract:

- currency_codes: ['USD', 'EUR']
- start_period: 'January'
- end_period: 'August'
- comparison_type: 'percentage difference'
- chart_type: 'bar'

Then call 'visualize_fx_rates' with these parameters.

Always ensure that you are polite and helpful. If any parameters are missing, ask the user for the missing information.
"""

